{"id":"node_modules/three/examples/jsm/controls/OrbitControls.js","dependencies":[{"name":"/Users/s4swata/Projects/Lopt/frontend/package.json","includedInParent":true,"mtime":1744624320180},{"name":"/Users/s4swata/Projects/Lopt/frontend/node_modules/three/package.json","includedInParent":true,"mtime":1744624308174},{"name":"three","loc":{"line":12,"column":7,"index":113},"parent":"/Users/s4swata/Projects/Lopt/frontend/node_modules/three/examples/jsm/controls/OrbitControls.js","resolved":"/Users/s4swata/Projects/Lopt/frontend/node_modules/three/build/three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrbitControls = void 0;\nvar _three = require(\"three\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\nfunction _get() { return _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }\nfunction _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Fires when the camera has been transformed by the controls.\n *\n * @event OrbitControls#change\n * @type {Object}\n */\nvar _changeEvent = {\n  type: 'change'\n};\n\n/**\n * Fires when an interaction was initiated.\n *\n * @event OrbitControls#start\n * @type {Object}\n */\nvar _startEvent = {\n  type: 'start'\n};\n\n/**\n * Fires when an interaction has finished.\n *\n * @event OrbitControls#end\n * @type {Object}\n */\nvar _endEvent = {\n  type: 'end'\n};\nvar _ray = new _three.Ray();\nvar _plane = new _three.Plane();\nvar _TILT_LIMIT = Math.cos(70 * _three.MathUtils.DEG2RAD);\nvar _v = new _three.Vector3();\nvar _twoPI = 2 * Math.PI;\nvar _STATE = {\n  NONE: -1,\n  ROTATE: 0,\n  DOLLY: 1,\n  PAN: 2,\n  TOUCH_ROTATE: 3,\n  TOUCH_PAN: 4,\n  TOUCH_DOLLY_PAN: 5,\n  TOUCH_DOLLY_ROTATE: 6\n};\nvar _EPS = 0.000001;\n\n/**\n * Orbit controls allow the camera to orbit around a target.\n *\n * OrbitControls performs orbiting, dollying (zooming), and panning. Unlike {@link TrackballControls},\n * it maintains the \"up\" direction `object.up` (+Y by default).\n *\n * - Orbit: Left mouse / touch: one-finger move.\n * - Zoom: Middle mouse, or mousewheel / touch: two-finger spread or squish.\n * - Pan: Right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move.\n *\n * ```js\n * const controls = new OrbitControls( camera, renderer.domElement );\n *\n * // controls.update() must be called after any manual changes to the camera's transform\n * camera.position.set( 0, 20, 100 );\n * controls.update();\n *\n * function animate() {\n *\n * \t// required if controls.enableDamping or controls.autoRotate are set to true\n * \tcontrols.update();\n *\n * \trenderer.render( scene, camera );\n *\n * }\n * ```\n *\n * @augments Controls\n */\nvar OrbitControls = exports.OrbitControls = /*#__PURE__*/function (_Controls) {\n  /**\n   * Constructs a new controls instance.\n   *\n   * @param {Object3D} object - The object that is managed by the controls.\n   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n   */\n  function OrbitControls(object) {\n    var _this;\n    var domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    _classCallCheck(this, OrbitControls);\n    _this = _callSuper(this, OrbitControls, [object, domElement]);\n    _this.state = _STATE.NONE;\n\n    /**\n     * The focus point of the controls, the `object` orbits around this.\n     * It can be updated manually at any point to change the focus of the controls.\n     *\n     * @type {Vector3}\n     */\n    _this.target = new _three.Vector3();\n\n    /**\n     * The focus point of the `minTargetRadius` and `maxTargetRadius` limits.\n     * It can be updated manually at any point to change the center of interest\n     * for the `target`.\n     *\n     * @type {Vector3}\n     */\n    _this.cursor = new _three.Vector3();\n\n    /**\n     * How far you can dolly in (perspective camera only).\n     *\n     * @type {number}\n     * @default 0\n     */\n    _this.minDistance = 0;\n\n    /**\n     * How far you can dolly out (perspective camera only).\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    _this.maxDistance = Infinity;\n\n    /**\n     * How far you can zoom in (orthographic camera only).\n     *\n     * @type {number}\n     * @default 0\n     */\n    _this.minZoom = 0;\n\n    /**\n     * How far you can zoom out (orthographic camera only).\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    _this.maxZoom = Infinity;\n\n    /**\n     * How close you can get the target to the 3D `cursor`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    _this.minTargetRadius = 0;\n\n    /**\n     * How far you can move the target from the 3D `cursor`.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    _this.maxTargetRadius = Infinity;\n\n    /**\n     * How far you can orbit vertically, lower limit. Range is `[0, Math.PI]` radians.\n     *\n     * @type {number}\n     * @default 0\n     */\n    _this.minPolarAngle = 0;\n\n    /**\n     * How far you can orbit vertically, upper limit. Range is `[0, Math.PI]` radians.\n     *\n     * @type {number}\n     * @default Math.PI\n     */\n    _this.maxPolarAngle = Math.PI;\n\n    /**\n     * How far you can orbit horizontally, lower limit. If set, the interval `[ min, max ]`\n     * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n     *\n     * @type {number}\n     * @default -Infinity\n     */\n    _this.minAzimuthAngle = -Infinity;\n\n    /**\n     * How far you can orbit horizontally, upper limit. If set, the interval `[ min, max ]`\n     * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n     *\n     * @type {number}\n     * @default -Infinity\n     */\n    _this.maxAzimuthAngle = Infinity;\n\n    /**\n     * Set to `true` to enable damping (inertia), which can be used to give a sense of weight\n     * to the controls. Note that if this is enabled, you must call `update()` in your animation\n     * loop.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _this.enableDamping = false;\n\n    /**\n     * The damping inertia used if `enableDamping` is set to `true`.\n     *\n     * Note that for this to work, you must call `update()` in your animation loop.\n     *\n     * @type {number}\n     * @default 0.05\n     */\n    _this.dampingFactor = 0.05;\n\n    /**\n     * Enable or disable zooming (dollying) of the camera.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    _this.enableZoom = true;\n\n    /**\n     * Speed of zooming / dollying.\n     *\n     * @type {number}\n     * @default 1\n     */\n    _this.zoomSpeed = 1.0;\n\n    /**\n     * Enable or disable horizontal and vertical rotation of the camera.\n     *\n     * Note that it is possible to disable a single axis by setting the min and max of the\n     * `minPolarAngle` or `minAzimuthAngle` to the same value, which will cause the vertical\n     * or horizontal rotation to be fixed at that value.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    _this.enableRotate = true;\n\n    /**\n     * Speed of rotation.\n     *\n     * @type {number}\n     * @default 1\n     */\n    _this.rotateSpeed = 1.0;\n\n    /**\n     * How fast to rotate the camera when the keyboard is used.\n     *\n     * @type {number}\n     * @default 1\n     */\n    _this.keyRotateSpeed = 1.0;\n\n    /**\n     * Enable or disable camera panning.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    _this.enablePan = true;\n\n    /**\n     * Speed of panning.\n     *\n     * @type {number}\n     * @default 1\n     */\n    _this.panSpeed = 1.0;\n\n    /**\n     * Defines how the camera's position is translated when panning. If `true`, the camera pans\n     * in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up\n     * direction.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    _this.screenSpacePanning = true;\n\n    /**\n     * How fast to pan the camera when the keyboard is used in\n     * pixels per keypress.\n     *\n     * @type {number}\n     * @default 7\n     */\n    _this.keyPanSpeed = 7.0;\n\n    /**\n     * Setting this property to `true` allows to zoom to the cursor's position.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _this.zoomToCursor = false;\n\n    /**\n     * Set to true to automatically rotate around the target\n     *\n     * Note that if this is enabled, you must call `update()` in your animation loop.\n     * If you want the auto-rotate speed to be independent of the frame rate (the refresh\n     * rate of the display), you must pass the time `deltaTime`, in seconds, to `update()`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _this.autoRotate = false;\n\n    /**\n     * How fast to rotate around the target if `autoRotate` is `true`. The default  equates to 30 seconds\n     * per orbit at 60fps.\n     *\n     * Note that if `autoRotate` is enabled, you must call `update()` in your animation loop.\n     *\n     * @type {number}\n     * @default 2\n     */\n    _this.autoRotateSpeed = 2.0;\n\n    /**\n     * This object contains references to the keycodes for controlling camera panning.\n     *\n     * ```js\n     * controls.keys = {\n     * \tLEFT: 'ArrowLeft', //left arrow\n     * \tUP: 'ArrowUp', // up arrow\n     * \tRIGHT: 'ArrowRight', // right arrow\n     * \tBOTTOM: 'ArrowDown' // down arrow\n     * }\n     * ```\n     * @type {Object}\n     */\n    _this.keys = {\n      LEFT: 'ArrowLeft',\n      UP: 'ArrowUp',\n      RIGHT: 'ArrowRight',\n      BOTTOM: 'ArrowDown'\n    };\n\n    /**\n     * This object contains references to the mouse actions used by the controls.\n     *\n     * ```js\n     * controls.mouseButtons = {\n     * \tLEFT: THREE.MOUSE.ROTATE,\n     * \tMIDDLE: THREE.MOUSE.DOLLY,\n     * \tRIGHT: THREE.MOUSE.PAN\n     * }\n     * ```\n     * @type {Object}\n     */\n    _this.mouseButtons = {\n      LEFT: _three.MOUSE.ROTATE,\n      MIDDLE: _three.MOUSE.DOLLY,\n      RIGHT: _three.MOUSE.PAN\n    };\n\n    /**\n     * This object contains references to the touch actions used by the controls.\n     *\n     * ```js\n     * controls.mouseButtons = {\n     * \tONE: THREE.TOUCH.ROTATE,\n     * \tTWO: THREE.TOUCH.DOLLY_PAN\n     * }\n     * ```\n     * @type {Object}\n     */\n    _this.touches = {\n      ONE: _three.TOUCH.ROTATE,\n      TWO: _three.TOUCH.DOLLY_PAN\n    };\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {Vector3}\n     */\n    _this.target0 = _this.target.clone();\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {Vector3}\n     */\n    _this.position0 = _this.object.position.clone();\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {number}\n     */\n    _this.zoom0 = _this.object.zoom;\n\n    // the target DOM element for key events\n    _this._domElementKeyEvents = null;\n\n    // internals\n\n    _this._lastPosition = new _three.Vector3();\n    _this._lastQuaternion = new _three.Quaternion();\n    _this._lastTargetPosition = new _three.Vector3();\n\n    // so camera.up is the orbit axis\n    _this._quat = new _three.Quaternion().setFromUnitVectors(object.up, new _three.Vector3(0, 1, 0));\n    _this._quatInverse = _this._quat.clone().invert();\n\n    // current position in spherical coordinates\n    _this._spherical = new _three.Spherical();\n    _this._sphericalDelta = new _three.Spherical();\n    _this._scale = 1;\n    _this._panOffset = new _three.Vector3();\n    _this._rotateStart = new _three.Vector2();\n    _this._rotateEnd = new _three.Vector2();\n    _this._rotateDelta = new _three.Vector2();\n    _this._panStart = new _three.Vector2();\n    _this._panEnd = new _three.Vector2();\n    _this._panDelta = new _three.Vector2();\n    _this._dollyStart = new _three.Vector2();\n    _this._dollyEnd = new _three.Vector2();\n    _this._dollyDelta = new _three.Vector2();\n    _this._dollyDirection = new _three.Vector3();\n    _this._mouse = new _three.Vector2();\n    _this._performCursorZoom = false;\n    _this._pointers = [];\n    _this._pointerPositions = {};\n    _this._controlActive = false;\n\n    // event listeners\n\n    _this._onPointerMove = onPointerMove.bind(_this);\n    _this._onPointerDown = onPointerDown.bind(_this);\n    _this._onPointerUp = onPointerUp.bind(_this);\n    _this._onContextMenu = onContextMenu.bind(_this);\n    _this._onMouseWheel = onMouseWheel.bind(_this);\n    _this._onKeyDown = onKeyDown.bind(_this);\n    _this._onTouchStart = onTouchStart.bind(_this);\n    _this._onTouchMove = onTouchMove.bind(_this);\n    _this._onMouseDown = onMouseDown.bind(_this);\n    _this._onMouseMove = onMouseMove.bind(_this);\n    _this._interceptControlDown = interceptControlDown.bind(_this);\n    _this._interceptControlUp = interceptControlUp.bind(_this);\n\n    //\n\n    if (_this.domElement !== null) {\n      _this.connect(_this.domElement);\n    }\n    _this.update();\n    return _this;\n  }\n  _inherits(OrbitControls, _Controls);\n  return _createClass(OrbitControls, [{\n    key: \"connect\",\n    value: function connect(element) {\n      _superPropGet(OrbitControls, \"connect\", this, 3)([element]);\n      this.domElement.addEventListener('pointerdown', this._onPointerDown);\n      this.domElement.addEventListener('pointercancel', this._onPointerUp);\n      this.domElement.addEventListener('contextmenu', this._onContextMenu);\n      this.domElement.addEventListener('wheel', this._onMouseWheel, {\n        passive: false\n      });\n      var document = this.domElement.getRootNode(); // offscreen canvas compatibility\n      document.addEventListener('keydown', this._interceptControlDown, {\n        passive: true,\n        capture: true\n      });\n      this.domElement.style.touchAction = 'none'; // disable touch scroll\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.domElement.removeEventListener('pointerdown', this._onPointerDown);\n      this.domElement.removeEventListener('pointermove', this._onPointerMove);\n      this.domElement.removeEventListener('pointerup', this._onPointerUp);\n      this.domElement.removeEventListener('pointercancel', this._onPointerUp);\n      this.domElement.removeEventListener('wheel', this._onMouseWheel);\n      this.domElement.removeEventListener('contextmenu', this._onContextMenu);\n      this.stopListenToKeyEvents();\n      var document = this.domElement.getRootNode(); // offscreen canvas compatibility\n      document.removeEventListener('keydown', this._interceptControlDown, {\n        capture: true\n      });\n      this.domElement.style.touchAction = 'auto';\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.disconnect();\n    }\n\n    /**\n     * Get the current vertical rotation, in radians.\n     *\n     * @return {number} The current vertical rotation, in radians.\n     */\n  }, {\n    key: \"getPolarAngle\",\n    value: function getPolarAngle() {\n      return this._spherical.phi;\n    }\n\n    /**\n     * Get the current horizontal rotation, in radians.\n     *\n     * @return {number} The current horizontal rotation, in radians.\n     */\n  }, {\n    key: \"getAzimuthalAngle\",\n    value: function getAzimuthalAngle() {\n      return this._spherical.theta;\n    }\n\n    /**\n     * Returns the distance from the camera to the target.\n     *\n     * @return {number} The distance from the camera to the target.\n     */\n  }, {\n    key: \"getDistance\",\n    value: function getDistance() {\n      return this.object.position.distanceTo(this.target);\n    }\n\n    /**\n     * Adds key event listeners to the given DOM element.\n     * `window` is a recommended argument for using this method.\n     *\n     * @param {HTMLDOMElement} domElement - The DOM element\n     */\n  }, {\n    key: \"listenToKeyEvents\",\n    value: function listenToKeyEvents(domElement) {\n      domElement.addEventListener('keydown', this._onKeyDown);\n      this._domElementKeyEvents = domElement;\n    }\n\n    /**\n     * Removes the key event listener previously defined with `listenToKeyEvents()`.\n     */\n  }, {\n    key: \"stopListenToKeyEvents\",\n    value: function stopListenToKeyEvents() {\n      if (this._domElementKeyEvents !== null) {\n        this._domElementKeyEvents.removeEventListener('keydown', this._onKeyDown);\n        this._domElementKeyEvents = null;\n      }\n    }\n\n    /**\n     * Save the current state of the controls. This can later be recovered with `reset()`.\n     */\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      this.target0.copy(this.target);\n      this.position0.copy(this.object.position);\n      this.zoom0 = this.object.zoom;\n    }\n\n    /**\n     * Reset the controls to their state from either the last time the `saveState()`\n     * was called, or the initial state.\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.target.copy(this.target0);\n      this.object.position.copy(this.position0);\n      this.object.zoom = this.zoom0;\n      this.object.updateProjectionMatrix();\n      this.dispatchEvent(_changeEvent);\n      this.update();\n      this.state = _STATE.NONE;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var deltaTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var position = this.object.position;\n      _v.copy(position).sub(this.target);\n\n      // rotate offset to \"y-axis-is-up\" space\n      _v.applyQuaternion(this._quat);\n\n      // angle from z-axis around y-axis\n      this._spherical.setFromVector3(_v);\n      if (this.autoRotate && this.state === _STATE.NONE) {\n        this._rotateLeft(this._getAutoRotationAngle(deltaTime));\n      }\n      if (this.enableDamping) {\n        this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n        this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n      } else {\n        this._spherical.theta += this._sphericalDelta.theta;\n        this._spherical.phi += this._sphericalDelta.phi;\n      }\n\n      // restrict theta to be between desired limits\n\n      var min = this.minAzimuthAngle;\n      var max = this.maxAzimuthAngle;\n      if (isFinite(min) && isFinite(max)) {\n        if (min < -Math.PI) min += _twoPI;else if (min > Math.PI) min -= _twoPI;\n        if (max < -Math.PI) max += _twoPI;else if (max > Math.PI) max -= _twoPI;\n        if (min <= max) {\n          this._spherical.theta = Math.max(min, Math.min(max, this._spherical.theta));\n        } else {\n          this._spherical.theta = this._spherical.theta > (min + max) / 2 ? Math.max(min, this._spherical.theta) : Math.min(max, this._spherical.theta);\n        }\n      }\n\n      // restrict phi to be between desired limits\n      this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));\n      this._spherical.makeSafe();\n\n      // move target to panned location\n\n      if (this.enableDamping === true) {\n        this.target.addScaledVector(this._panOffset, this.dampingFactor);\n      } else {\n        this.target.add(this._panOffset);\n      }\n\n      // Limit the target distance from the cursor to create a sphere around the center of interest\n      this.target.sub(this.cursor);\n      this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);\n      this.target.add(this.cursor);\n      var zoomChanged = false;\n      // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n      // we adjust zoom later in these cases\n      if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {\n        this._spherical.radius = this._clampDistance(this._spherical.radius);\n      } else {\n        var prevRadius = this._spherical.radius;\n        this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);\n        zoomChanged = prevRadius != this._spherical.radius;\n      }\n      _v.setFromSpherical(this._spherical);\n\n      // rotate offset back to \"camera-up-vector-is-up\" space\n      _v.applyQuaternion(this._quatInverse);\n      position.copy(this.target).add(_v);\n      this.object.lookAt(this.target);\n      if (this.enableDamping === true) {\n        this._sphericalDelta.theta *= 1 - this.dampingFactor;\n        this._sphericalDelta.phi *= 1 - this.dampingFactor;\n        this._panOffset.multiplyScalar(1 - this.dampingFactor);\n      } else {\n        this._sphericalDelta.set(0, 0, 0);\n        this._panOffset.set(0, 0, 0);\n      }\n\n      // adjust camera position\n      if (this.zoomToCursor && this._performCursorZoom) {\n        var newRadius = null;\n        if (this.object.isPerspectiveCamera) {\n          // move the camera down the pointer ray\n          // this method avoids floating point error\n          var _prevRadius = _v.length();\n          newRadius = this._clampDistance(_prevRadius * this._scale);\n          var radiusDelta = _prevRadius - newRadius;\n          this.object.position.addScaledVector(this._dollyDirection, radiusDelta);\n          this.object.updateMatrixWorld();\n          zoomChanged = !!radiusDelta;\n        } else if (this.object.isOrthographicCamera) {\n          // adjust the ortho camera position based on zoom changes\n          var mouseBefore = new _three.Vector3(this._mouse.x, this._mouse.y, 0);\n          mouseBefore.unproject(this.object);\n          var prevZoom = this.object.zoom;\n          this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n          this.object.updateProjectionMatrix();\n          zoomChanged = prevZoom !== this.object.zoom;\n          var mouseAfter = new _three.Vector3(this._mouse.x, this._mouse.y, 0);\n          mouseAfter.unproject(this.object);\n          this.object.position.sub(mouseAfter).add(mouseBefore);\n          this.object.updateMatrixWorld();\n          newRadius = _v.length();\n        } else {\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.');\n          this.zoomToCursor = false;\n        }\n\n        // handle the placement of the target\n        if (newRadius !== null) {\n          if (this.screenSpacePanning) {\n            // position the orbit target in front of the new camera position\n            this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);\n          } else {\n            // get the ray and translation plane to compute target\n            _ray.origin.copy(this.object.position);\n            _ray.direction.set(0, 0, -1).transformDirection(this.object.matrix);\n\n            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n            // extremely large values\n            if (Math.abs(this.object.up.dot(_ray.direction)) < _TILT_LIMIT) {\n              this.object.lookAt(this.target);\n            } else {\n              _plane.setFromNormalAndCoplanarPoint(this.object.up, this.target);\n              _ray.intersectPlane(_plane, this.target);\n            }\n          }\n        }\n      } else if (this.object.isOrthographicCamera) {\n        var _prevZoom = this.object.zoom;\n        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n        if (_prevZoom !== this.object.zoom) {\n          this.object.updateProjectionMatrix();\n          zoomChanged = true;\n        }\n      }\n      this._scale = 1;\n      this._performCursorZoom = false;\n\n      // update condition is:\n      // min(camera displacement, camera rotation in radians)^2 > EPS\n      // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n      if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS || this._lastTargetPosition.distanceToSquared(this.target) > _EPS) {\n        this.dispatchEvent(_changeEvent);\n        this._lastPosition.copy(this.object.position);\n        this._lastQuaternion.copy(this.object.quaternion);\n        this._lastTargetPosition.copy(this.target);\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"_getAutoRotationAngle\",\n    value: function _getAutoRotationAngle(deltaTime) {\n      if (deltaTime !== null) {\n        return _twoPI / 60 * this.autoRotateSpeed * deltaTime;\n      } else {\n        return _twoPI / 60 / 60 * this.autoRotateSpeed;\n      }\n    }\n  }, {\n    key: \"_getZoomScale\",\n    value: function _getZoomScale(delta) {\n      var normalizedDelta = Math.abs(delta * 0.01);\n      return Math.pow(0.95, this.zoomSpeed * normalizedDelta);\n    }\n  }, {\n    key: \"_rotateLeft\",\n    value: function _rotateLeft(angle) {\n      this._sphericalDelta.theta -= angle;\n    }\n  }, {\n    key: \"_rotateUp\",\n    value: function _rotateUp(angle) {\n      this._sphericalDelta.phi -= angle;\n    }\n  }, {\n    key: \"_panLeft\",\n    value: function _panLeft(distance, objectMatrix) {\n      _v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n      _v.multiplyScalar(-distance);\n      this._panOffset.add(_v);\n    }\n  }, {\n    key: \"_panUp\",\n    value: function _panUp(distance, objectMatrix) {\n      if (this.screenSpacePanning === true) {\n        _v.setFromMatrixColumn(objectMatrix, 1);\n      } else {\n        _v.setFromMatrixColumn(objectMatrix, 0);\n        _v.crossVectors(this.object.up, _v);\n      }\n      _v.multiplyScalar(distance);\n      this._panOffset.add(_v);\n    }\n\n    // deltaX and deltaY are in pixels; right and down are positive\n  }, {\n    key: \"_pan\",\n    value: function _pan(deltaX, deltaY) {\n      var element = this.domElement;\n      if (this.object.isPerspectiveCamera) {\n        // perspective\n        var position = this.object.position;\n        _v.copy(position).sub(this.target);\n        var targetDistance = _v.length();\n\n        // half of the fov is center to top of screen\n        targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180.0);\n\n        // we use only clientHeight here so aspect ratio does not distort speed\n        this._panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);\n        this._panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);\n      } else if (this.object.isOrthographicCamera) {\n        // orthographic\n        this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);\n        this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);\n      } else {\n        // camera neither orthographic nor perspective\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n        this.enablePan = false;\n      }\n    }\n  }, {\n    key: \"_dollyOut\",\n    value: function _dollyOut(dollyScale) {\n      if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n        this._scale /= dollyScale;\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        this.enableZoom = false;\n      }\n    }\n  }, {\n    key: \"_dollyIn\",\n    value: function _dollyIn(dollyScale) {\n      if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n        this._scale *= dollyScale;\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        this.enableZoom = false;\n      }\n    }\n  }, {\n    key: \"_updateZoomParameters\",\n    value: function _updateZoomParameters(x, y) {\n      if (!this.zoomToCursor) {\n        return;\n      }\n      this._performCursorZoom = true;\n      var rect = this.domElement.getBoundingClientRect();\n      var dx = x - rect.left;\n      var dy = y - rect.top;\n      var w = rect.width;\n      var h = rect.height;\n      this._mouse.x = dx / w * 2 - 1;\n      this._mouse.y = -(dy / h) * 2 + 1;\n      this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();\n    }\n  }, {\n    key: \"_clampDistance\",\n    value: function _clampDistance(dist) {\n      return Math.max(this.minDistance, Math.min(this.maxDistance, dist));\n    }\n\n    //\n    // event callbacks - update the object state\n    //\n  }, {\n    key: \"_handleMouseDownRotate\",\n    value: function _handleMouseDownRotate(event) {\n      this._rotateStart.set(event.clientX, event.clientY);\n    }\n  }, {\n    key: \"_handleMouseDownDolly\",\n    value: function _handleMouseDownDolly(event) {\n      this._updateZoomParameters(event.clientX, event.clientX);\n      this._dollyStart.set(event.clientX, event.clientY);\n    }\n  }, {\n    key: \"_handleMouseDownPan\",\n    value: function _handleMouseDownPan(event) {\n      this._panStart.set(event.clientX, event.clientY);\n    }\n  }, {\n    key: \"_handleMouseMoveRotate\",\n    value: function _handleMouseMoveRotate(event) {\n      this._rotateEnd.set(event.clientX, event.clientY);\n      this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n      var element = this.domElement;\n      this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n\n      this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n      this._rotateStart.copy(this._rotateEnd);\n      this.update();\n    }\n  }, {\n    key: \"_handleMouseMoveDolly\",\n    value: function _handleMouseMoveDolly(event) {\n      this._dollyEnd.set(event.clientX, event.clientY);\n      this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);\n      if (this._dollyDelta.y > 0) {\n        this._dollyOut(this._getZoomScale(this._dollyDelta.y));\n      } else if (this._dollyDelta.y < 0) {\n        this._dollyIn(this._getZoomScale(this._dollyDelta.y));\n      }\n      this._dollyStart.copy(this._dollyEnd);\n      this.update();\n    }\n  }, {\n    key: \"_handleMouseMovePan\",\n    value: function _handleMouseMovePan(event) {\n      this._panEnd.set(event.clientX, event.clientY);\n      this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n      this._pan(this._panDelta.x, this._panDelta.y);\n      this._panStart.copy(this._panEnd);\n      this.update();\n    }\n  }, {\n    key: \"_handleMouseWheel\",\n    value: function _handleMouseWheel(event) {\n      this._updateZoomParameters(event.clientX, event.clientY);\n      if (event.deltaY < 0) {\n        this._dollyIn(this._getZoomScale(event.deltaY));\n      } else if (event.deltaY > 0) {\n        this._dollyOut(this._getZoomScale(event.deltaY));\n      }\n      this.update();\n    }\n  }, {\n    key: \"_handleKeyDown\",\n    value: function _handleKeyDown(event) {\n      var needsUpdate = false;\n      switch (event.code) {\n        case this.keys.UP:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (this.enableRotate) {\n              this._rotateUp(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n            }\n          } else {\n            if (this.enablePan) {\n              this._pan(0, this.keyPanSpeed);\n            }\n          }\n          needsUpdate = true;\n          break;\n        case this.keys.BOTTOM:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (this.enableRotate) {\n              this._rotateUp(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n            }\n          } else {\n            if (this.enablePan) {\n              this._pan(0, -this.keyPanSpeed);\n            }\n          }\n          needsUpdate = true;\n          break;\n        case this.keys.LEFT:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (this.enableRotate) {\n              this._rotateLeft(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n            }\n          } else {\n            if (this.enablePan) {\n              this._pan(this.keyPanSpeed, 0);\n            }\n          }\n          needsUpdate = true;\n          break;\n        case this.keys.RIGHT:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (this.enableRotate) {\n              this._rotateLeft(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n            }\n          } else {\n            if (this.enablePan) {\n              this._pan(-this.keyPanSpeed, 0);\n            }\n          }\n          needsUpdate = true;\n          break;\n      }\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault();\n        this.update();\n      }\n    }\n  }, {\n    key: \"_handleTouchStartRotate\",\n    value: function _handleTouchStartRotate(event) {\n      if (this._pointers.length === 1) {\n        this._rotateStart.set(event.pageX, event.pageY);\n      } else {\n        var position = this._getSecondPointerPosition(event);\n        var x = 0.5 * (event.pageX + position.x);\n        var y = 0.5 * (event.pageY + position.y);\n        this._rotateStart.set(x, y);\n      }\n    }\n  }, {\n    key: \"_handleTouchStartPan\",\n    value: function _handleTouchStartPan(event) {\n      if (this._pointers.length === 1) {\n        this._panStart.set(event.pageX, event.pageY);\n      } else {\n        var position = this._getSecondPointerPosition(event);\n        var x = 0.5 * (event.pageX + position.x);\n        var y = 0.5 * (event.pageY + position.y);\n        this._panStart.set(x, y);\n      }\n    }\n  }, {\n    key: \"_handleTouchStartDolly\",\n    value: function _handleTouchStartDolly(event) {\n      var position = this._getSecondPointerPosition(event);\n      var dx = event.pageX - position.x;\n      var dy = event.pageY - position.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      this._dollyStart.set(0, distance);\n    }\n  }, {\n    key: \"_handleTouchStartDollyPan\",\n    value: function _handleTouchStartDollyPan(event) {\n      if (this.enableZoom) this._handleTouchStartDolly(event);\n      if (this.enablePan) this._handleTouchStartPan(event);\n    }\n  }, {\n    key: \"_handleTouchStartDollyRotate\",\n    value: function _handleTouchStartDollyRotate(event) {\n      if (this.enableZoom) this._handleTouchStartDolly(event);\n      if (this.enableRotate) this._handleTouchStartRotate(event);\n    }\n  }, {\n    key: \"_handleTouchMoveRotate\",\n    value: function _handleTouchMoveRotate(event) {\n      if (this._pointers.length == 1) {\n        this._rotateEnd.set(event.pageX, event.pageY);\n      } else {\n        var position = this._getSecondPointerPosition(event);\n        var x = 0.5 * (event.pageX + position.x);\n        var y = 0.5 * (event.pageY + position.y);\n        this._rotateEnd.set(x, y);\n      }\n      this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n      var element = this.domElement;\n      this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n\n      this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n      this._rotateStart.copy(this._rotateEnd);\n    }\n  }, {\n    key: \"_handleTouchMovePan\",\n    value: function _handleTouchMovePan(event) {\n      if (this._pointers.length === 1) {\n        this._panEnd.set(event.pageX, event.pageY);\n      } else {\n        var position = this._getSecondPointerPosition(event);\n        var x = 0.5 * (event.pageX + position.x);\n        var y = 0.5 * (event.pageY + position.y);\n        this._panEnd.set(x, y);\n      }\n      this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n      this._pan(this._panDelta.x, this._panDelta.y);\n      this._panStart.copy(this._panEnd);\n    }\n  }, {\n    key: \"_handleTouchMoveDolly\",\n    value: function _handleTouchMoveDolly(event) {\n      var position = this._getSecondPointerPosition(event);\n      var dx = event.pageX - position.x;\n      var dy = event.pageY - position.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      this._dollyEnd.set(0, distance);\n      this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));\n      this._dollyOut(this._dollyDelta.y);\n      this._dollyStart.copy(this._dollyEnd);\n      var centerX = (event.pageX + position.x) * 0.5;\n      var centerY = (event.pageY + position.y) * 0.5;\n      this._updateZoomParameters(centerX, centerY);\n    }\n  }, {\n    key: \"_handleTouchMoveDollyPan\",\n    value: function _handleTouchMoveDollyPan(event) {\n      if (this.enableZoom) this._handleTouchMoveDolly(event);\n      if (this.enablePan) this._handleTouchMovePan(event);\n    }\n  }, {\n    key: \"_handleTouchMoveDollyRotate\",\n    value: function _handleTouchMoveDollyRotate(event) {\n      if (this.enableZoom) this._handleTouchMoveDolly(event);\n      if (this.enableRotate) this._handleTouchMoveRotate(event);\n    }\n\n    // pointers\n  }, {\n    key: \"_addPointer\",\n    value: function _addPointer(event) {\n      this._pointers.push(event.pointerId);\n    }\n  }, {\n    key: \"_removePointer\",\n    value: function _removePointer(event) {\n      delete this._pointerPositions[event.pointerId];\n      for (var i = 0; i < this._pointers.length; i++) {\n        if (this._pointers[i] == event.pointerId) {\n          this._pointers.splice(i, 1);\n          return;\n        }\n      }\n    }\n  }, {\n    key: \"_isTrackingPointer\",\n    value: function _isTrackingPointer(event) {\n      for (var i = 0; i < this._pointers.length; i++) {\n        if (this._pointers[i] == event.pointerId) return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"_trackPointer\",\n    value: function _trackPointer(event) {\n      var position = this._pointerPositions[event.pointerId];\n      if (position === undefined) {\n        position = new _three.Vector2();\n        this._pointerPositions[event.pointerId] = position;\n      }\n      position.set(event.pageX, event.pageY);\n    }\n  }, {\n    key: \"_getSecondPointerPosition\",\n    value: function _getSecondPointerPosition(event) {\n      var pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];\n      return this._pointerPositions[pointerId];\n    }\n\n    //\n  }, {\n    key: \"_customWheelEvent\",\n    value: function _customWheelEvent(event) {\n      var mode = event.deltaMode;\n\n      // minimal wheel event altered to meet delta-zoom demand\n      var newEvent = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        deltaY: event.deltaY\n      };\n      switch (mode) {\n        case 1:\n          // LINE_MODE\n          newEvent.deltaY *= 16;\n          break;\n        case 2:\n          // PAGE_MODE\n          newEvent.deltaY *= 100;\n          break;\n      }\n\n      // detect if event was triggered by pinching\n      if (event.ctrlKey && !this._controlActive) {\n        newEvent.deltaY *= 10;\n      }\n      return newEvent;\n    }\n  }]);\n}(_three.Controls);\nfunction onPointerDown(event) {\n  if (this.enabled === false) return;\n  if (this._pointers.length === 0) {\n    this.domElement.setPointerCapture(event.pointerId);\n    this.domElement.addEventListener('pointermove', this._onPointerMove);\n    this.domElement.addEventListener('pointerup', this._onPointerUp);\n  }\n\n  //\n\n  if (this._isTrackingPointer(event)) return;\n\n  //\n\n  this._addPointer(event);\n  if (event.pointerType === 'touch') {\n    this._onTouchStart(event);\n  } else {\n    this._onMouseDown(event);\n  }\n}\nfunction onPointerMove(event) {\n  if (this.enabled === false) return;\n  if (event.pointerType === 'touch') {\n    this._onTouchMove(event);\n  } else {\n    this._onMouseMove(event);\n  }\n}\nfunction onPointerUp(event) {\n  this._removePointer(event);\n  switch (this._pointers.length) {\n    case 0:\n      this.domElement.releasePointerCapture(event.pointerId);\n      this.domElement.removeEventListener('pointermove', this._onPointerMove);\n      this.domElement.removeEventListener('pointerup', this._onPointerUp);\n      this.dispatchEvent(_endEvent);\n      this.state = _STATE.NONE;\n      break;\n    case 1:\n      var pointerId = this._pointers[0];\n      var position = this._pointerPositions[pointerId];\n\n      // minimal placeholder event - allows state correction on pointer-up\n      this._onTouchStart({\n        pointerId: pointerId,\n        pageX: position.x,\n        pageY: position.y\n      });\n      break;\n  }\n}\nfunction onMouseDown(event) {\n  var mouseAction;\n  switch (event.button) {\n    case 0:\n      mouseAction = this.mouseButtons.LEFT;\n      break;\n    case 1:\n      mouseAction = this.mouseButtons.MIDDLE;\n      break;\n    case 2:\n      mouseAction = this.mouseButtons.RIGHT;\n      break;\n    default:\n      mouseAction = -1;\n  }\n  switch (mouseAction) {\n    case _three.MOUSE.DOLLY:\n      if (this.enableZoom === false) return;\n      this._handleMouseDownDolly(event);\n      this.state = _STATE.DOLLY;\n      break;\n    case _three.MOUSE.ROTATE:\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        if (this.enablePan === false) return;\n        this._handleMouseDownPan(event);\n        this.state = _STATE.PAN;\n      } else {\n        if (this.enableRotate === false) return;\n        this._handleMouseDownRotate(event);\n        this.state = _STATE.ROTATE;\n      }\n      break;\n    case _three.MOUSE.PAN:\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        if (this.enableRotate === false) return;\n        this._handleMouseDownRotate(event);\n        this.state = _STATE.ROTATE;\n      } else {\n        if (this.enablePan === false) return;\n        this._handleMouseDownPan(event);\n        this.state = _STATE.PAN;\n      }\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n  if (this.state !== _STATE.NONE) {\n    this.dispatchEvent(_startEvent);\n  }\n}\nfunction onMouseMove(event) {\n  switch (this.state) {\n    case _STATE.ROTATE:\n      if (this.enableRotate === false) return;\n      this._handleMouseMoveRotate(event);\n      break;\n    case _STATE.DOLLY:\n      if (this.enableZoom === false) return;\n      this._handleMouseMoveDolly(event);\n      break;\n    case _STATE.PAN:\n      if (this.enablePan === false) return;\n      this._handleMouseMovePan(event);\n      break;\n  }\n}\nfunction onMouseWheel(event) {\n  if (this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE) return;\n  event.preventDefault();\n  this.dispatchEvent(_startEvent);\n  this._handleMouseWheel(this._customWheelEvent(event));\n  this.dispatchEvent(_endEvent);\n}\nfunction onKeyDown(event) {\n  if (this.enabled === false) return;\n  this._handleKeyDown(event);\n}\nfunction onTouchStart(event) {\n  this._trackPointer(event);\n  switch (this._pointers.length) {\n    case 1:\n      switch (this.touches.ONE) {\n        case _three.TOUCH.ROTATE:\n          if (this.enableRotate === false) return;\n          this._handleTouchStartRotate(event);\n          this.state = _STATE.TOUCH_ROTATE;\n          break;\n        case _three.TOUCH.PAN:\n          if (this.enablePan === false) return;\n          this._handleTouchStartPan(event);\n          this.state = _STATE.TOUCH_PAN;\n          break;\n        default:\n          this.state = _STATE.NONE;\n      }\n      break;\n    case 2:\n      switch (this.touches.TWO) {\n        case _three.TOUCH.DOLLY_PAN:\n          if (this.enableZoom === false && this.enablePan === false) return;\n          this._handleTouchStartDollyPan(event);\n          this.state = _STATE.TOUCH_DOLLY_PAN;\n          break;\n        case _three.TOUCH.DOLLY_ROTATE:\n          if (this.enableZoom === false && this.enableRotate === false) return;\n          this._handleTouchStartDollyRotate(event);\n          this.state = _STATE.TOUCH_DOLLY_ROTATE;\n          break;\n        default:\n          this.state = _STATE.NONE;\n      }\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n  if (this.state !== _STATE.NONE) {\n    this.dispatchEvent(_startEvent);\n  }\n}\nfunction onTouchMove(event) {\n  this._trackPointer(event);\n  switch (this.state) {\n    case _STATE.TOUCH_ROTATE:\n      if (this.enableRotate === false) return;\n      this._handleTouchMoveRotate(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_PAN:\n      if (this.enablePan === false) return;\n      this._handleTouchMovePan(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_DOLLY_PAN:\n      if (this.enableZoom === false && this.enablePan === false) return;\n      this._handleTouchMoveDollyPan(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_DOLLY_ROTATE:\n      if (this.enableZoom === false && this.enableRotate === false) return;\n      this._handleTouchMoveDollyRotate(event);\n      this.update();\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n}\nfunction onContextMenu(event) {\n  if (this.enabled === false) return;\n  event.preventDefault();\n}\nfunction interceptControlDown(event) {\n  if (event.key === 'Control') {\n    this._controlActive = true;\n    var document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n    document.addEventListener('keyup', this._interceptControlUp, {\n      passive: true,\n      capture: true\n    });\n  }\n}\nfunction interceptControlUp(event) {\n  if (event.key === 'Control') {\n    this._controlActive = false;\n    var document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n    document.removeEventListener('keyup', this._interceptControlUp, {\n      passive: true,\n      capture: true\n    });\n  }\n}"},"sourceMaps":null,"error":null,"hash":"f038b0aa7bc849a73bc72ae7f486795e","cacheData":{"env":{}}}