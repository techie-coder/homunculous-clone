{"id":"node_modules/three/examples/jsm/postprocessing/MaskPass.js","dependencies":[{"name":"/Users/s4swata/Projects/three/homunculous/landing/package.json","includedInParent":true,"mtime":1744698815492},{"name":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/package.json","includedInParent":true,"mtime":1744698815215},{"name":"./Pass.js","loc":{"line":1,"column":21,"index":21},"parent":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/examples/jsm/postprocessing/MaskPass.js","resolved":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/examples/jsm/postprocessing/Pass.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MaskPass = exports.ClearMaskPass = void 0;\nvar _Pass3 = require(\"./Pass.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * This pass can be used to define a mask during post processing.\n * Meaning only areas of subsequent post processing are affected\n * which lie in the masking area of this pass. Internally, the masking\n * is implemented with the stencil buffer.\n *\n * ```js\n * const maskPass = new MaskPass( scene, camera );\n * composer.addPass( maskPass );\n * ```\n *\n * @augments Pass\n */\nvar MaskPass = exports.MaskPass = /*#__PURE__*/function (_Pass) {\n  /**\n   * Constructs a new mask pass.\n   *\n   * @param {Scene} scene - The 3D objects in this scene will define the mask.\n   * @param {Camera} camera - The camera.\n   */\n  function MaskPass(scene, camera) {\n    var _this;\n    _classCallCheck(this, MaskPass);\n    _this = _callSuper(this, MaskPass);\n\n    /**\n     * The scene that defines the mask.\n     *\n     * @type {Scene}\n     */\n    _this.scene = scene;\n\n    /**\n     * The camera.\n     *\n     * @type {Camera}\n     */\n    _this.camera = camera;\n\n    /**\n     * Overwritten to perform a clear operation by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    _this.clear = true;\n\n    /**\n     * Overwritten to disable the swap.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _this.needsSwap = false;\n\n    /**\n     * Whether to inverse the mask or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _this.inverse = false;\n    return _this;\n  }\n\n  /**\n   * Performs a mask pass with the configured scene and camera.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  _inherits(MaskPass, _Pass);\n  return _createClass(MaskPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n      var context = renderer.getContext();\n      var state = renderer.state;\n\n      // don't update color or depth\n\n      state.buffers.color.setMask(false);\n      state.buffers.depth.setMask(false);\n\n      // lock buffers\n\n      state.buffers.color.setLocked(true);\n      state.buffers.depth.setLocked(true);\n\n      // set up stencil\n\n      var writeValue, clearValue;\n      if (this.inverse) {\n        writeValue = 0;\n        clearValue = 1;\n      } else {\n        writeValue = 1;\n        clearValue = 0;\n      }\n      state.buffers.stencil.setTest(true);\n      state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n      state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n      state.buffers.stencil.setClear(clearValue);\n      state.buffers.stencil.setLocked(true);\n\n      // draw into the stencil buffer\n\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n\n      // unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n      state.buffers.color.setLocked(false);\n      state.buffers.depth.setLocked(false);\n      state.buffers.color.setMask(true);\n      state.buffers.depth.setMask(true);\n\n      // only render where stencil is set to 1\n\n      state.buffers.stencil.setLocked(false);\n      state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n      state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n      state.buffers.stencil.setLocked(true);\n    }\n  }]);\n}(_Pass3.Pass);\n/**\n * This pass can be used to clear a mask previously defined with {@link MaskPass}.\n *\n * ```js\n * const clearPass = new ClearMaskPass();\n * composer.addPass( clearPass );\n * ```\n *\n * @augments Pass\n */\nvar ClearMaskPass = exports.ClearMaskPass = /*#__PURE__*/function (_Pass2) {\n  /**\n   * Constructs a new clear mask pass.\n   */\n  function ClearMaskPass() {\n    var _this2;\n    _classCallCheck(this, ClearMaskPass);\n    _this2 = _callSuper(this, ClearMaskPass);\n\n    /**\n     * Overwritten to disable the swap.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _this2.needsSwap = false;\n    return _this2;\n  }\n\n  /**\n   * Performs the clear of the currently defined mask.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  _inherits(ClearMaskPass, _Pass2);\n  return _createClass(ClearMaskPass, [{\n    key: \"render\",\n    value: function render(renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */) {\n      renderer.state.buffers.stencil.setLocked(false);\n      renderer.state.buffers.stencil.setTest(false);\n    }\n  }]);\n}(_Pass3.Pass);"},"sourceMaps":null,"error":null,"hash":"665c2e417c24f085d619fc196e7bedcb","cacheData":{"env":{}}}