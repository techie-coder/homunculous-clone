{"id":"node_modules/three/examples/jsm/shaders/DotScreenShader.js","dependencies":[{"name":"/Users/s4swata/Projects/Lopt/frontend/package.json","includedInParent":true,"mtime":1744624320180},{"name":"/Users/s4swata/Projects/Lopt/frontend/node_modules/three/package.json","includedInParent":true,"mtime":1744624308174},{"name":"three","loc":{"line":3,"column":7,"index":25},"parent":"/Users/s4swata/Projects/Lopt/frontend/node_modules/three/examples/jsm/shaders/DotScreenShader.js","resolved":"/Users/s4swata/Projects/Lopt/frontend/node_modules/three/build/three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DotScreenShader = void 0;\nvar _three = require(\"three\");\n/** @module DotScreenShader */\n\n/**\n * Dot screen shader based on [glfx.js sepia shader]{@link https://github.com/evanw/glfx.js}.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nvar DotScreenShader = exports.DotScreenShader = {\n  name: 'DotScreenShader',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'tSize': {\n      value: new _three.Vector2(256, 256)\n    },\n    'center': {\n      value: new _three.Vector2(0.5, 0.5)\n    },\n    'angle': {\n      value: 1.57\n    },\n    'scale': {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\tuniform vec2 center;\\n\\t\\tuniform float angle;\\n\\t\\tuniform float scale;\\n\\t\\tuniform vec2 tSize;\\n\\n\\t\\tuniform sampler2D tDiffuse;\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tfloat pattern() {\\n\\n\\t\\t\\tfloat s = sin( angle ), c = cos( angle );\\n\\n\\t\\t\\tvec2 tex = vUv * tSize - center;\\n\\t\\t\\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\\n\\n\\t\\t\\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 color = texture2D( tDiffuse, vUv );\\n\\n\\t\\t\\tfloat average = ( color.r + color.g + color.b ) / 3.0;\\n\\n\\t\\t\\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\\n\\n\\t\\t}\"\n};"},"sourceMaps":null,"error":null,"hash":"9e299a5f37f18ebe648e8eae85b664b3","cacheData":{"env":{}}}