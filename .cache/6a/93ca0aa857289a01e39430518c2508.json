{"id":"node_modules/three/examples/jsm/postprocessing/RenderPass.js","dependencies":[{"name":"/Users/s4swata/Projects/three/homunculous/landing/package.json","includedInParent":true,"mtime":1744698815492},{"name":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/package.json","includedInParent":true,"mtime":1744698815215},{"name":"three","loc":{"line":3,"column":7,"index":23},"parent":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/examples/jsm/postprocessing/RenderPass.js","resolved":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/build/three.module.js"},{"name":"./Pass.js","loc":{"line":4,"column":21,"index":53},"parent":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/examples/jsm/postprocessing/RenderPass.js","resolved":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/examples/jsm/postprocessing/Pass.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenderPass = void 0;\nvar _three = require(\"three\");\nvar _Pass2 = require(\"./Pass.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * This class represents a render pass. It takes a camera and a scene and produces\n * a beauty pass for subsequent post processing effects.\n *\n * ```js\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n * ```\n *\n * @augments Pass\n */\nvar RenderPass = exports.RenderPass = /*#__PURE__*/function (_Pass) {\n  /**\n   * Constructs a new render pass.\n   *\n   * @param {Scene} scene - The scene to render.\n   * @param {Camera} camera - The camera.\n   * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used\n   * for all objects in the scene.\n   * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.\n   * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.\n   */\n  function RenderPass(scene, camera) {\n    var _this;\n    var overrideMaterial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var clearColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var clearAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    _classCallCheck(this, RenderPass);\n    _this = _callSuper(this, RenderPass);\n\n    /**\n     * The scene to render.\n     *\n     * @type {Scene}\n     */\n    _this.scene = scene;\n\n    /**\n     * The camera.\n     *\n     * @type {Camera}\n     */\n    _this.camera = camera;\n\n    /**\n     * The override material. If set, this material is used\n     * for all objects in the scene.\n     *\n     * @type {?Material}\n     * @default null\n     */\n    _this.overrideMaterial = overrideMaterial;\n\n    /**\n     * The clear color of the render pass.\n     *\n     * @type {?(number|Color|string)}\n     * @default null\n     */\n    _this.clearColor = clearColor;\n\n    /**\n     * The clear alpha of the render pass.\n     *\n     * @type {?number}\n     * @default null\n     */\n    _this.clearAlpha = clearAlpha;\n\n    /**\n     * Overwritten to perform a clear operation by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    _this.clear = true;\n\n    /**\n     * If set to `true`, only the depth can be cleared when `clear` is to `false`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _this.clearDepth = false;\n\n    /**\n     * Overwritten to disable the swap.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _this.needsSwap = false;\n    _this._oldClearColor = new _three.Color();\n    return _this;\n  }\n\n  /**\n   * Performs a beauty pass with the configured scene and camera.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  _inherits(RenderPass, _Pass);\n  return _createClass(RenderPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      var oldClearAlpha, oldOverrideMaterial;\n      if (this.overrideMaterial !== null) {\n        oldOverrideMaterial = this.scene.overrideMaterial;\n        this.scene.overrideMaterial = this.overrideMaterial;\n      }\n      if (this.clearColor !== null) {\n        renderer.getClearColor(this._oldClearColor);\n        renderer.setClearColor(this.clearColor, renderer.getClearAlpha());\n      }\n      if (this.clearAlpha !== null) {\n        oldClearAlpha = renderer.getClearAlpha();\n        renderer.setClearAlpha(this.clearAlpha);\n      }\n      if (this.clearDepth == true) {\n        renderer.clearDepth();\n      }\n      renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n      if (this.clear === true) {\n        // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      }\n      renderer.render(this.scene, this.camera);\n\n      // restore\n\n      if (this.clearColor !== null) {\n        renderer.setClearColor(this._oldClearColor);\n      }\n      if (this.clearAlpha !== null) {\n        renderer.setClearAlpha(oldClearAlpha);\n      }\n      if (this.overrideMaterial !== null) {\n        this.scene.overrideMaterial = oldOverrideMaterial;\n      }\n      renderer.autoClear = oldAutoClear;\n    }\n  }]);\n}(_Pass2.Pass);"},"sourceMaps":null,"error":null,"hash":"95863ccde312991ecc830acc1c6982fe","cacheData":{"env":{}}}