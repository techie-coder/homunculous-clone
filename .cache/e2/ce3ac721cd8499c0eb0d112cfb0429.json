{"id":"node_modules/three/examples/jsm/shaders/RGBShiftShader.js","dependencies":[{"name":"/Users/s4swata/Projects/three/homunculous/landing/package.json","includedInParent":true,"mtime":1744698815492},{"name":"/Users/s4swata/Projects/three/homunculous/landing/node_modules/three/package.json","includedInParent":true,"mtime":1744698815215}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RGBShiftShader = void 0;\n/** @module RGBShiftShader */\n\n/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from https://web.archive.org/web/20090820185047/http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / https://web.archive.org/web/20090810054752/http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nvar RGBShiftShader = exports.RGBShiftShader = {\n  name: 'RGBShiftShader',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'amount': {\n      value: 0.005\n    },\n    'angle': {\n      value: 0.0\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tuniform float amount;\\n\\t\\tuniform float angle;\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec2 offset = amount * vec2( cos(angle), sin(angle));\\n\\t\\t\\tvec4 cr = texture2D(tDiffuse, vUv + offset);\\n\\t\\t\\tvec4 cga = texture2D(tDiffuse, vUv);\\n\\t\\t\\tvec4 cb = texture2D(tDiffuse, vUv - offset);\\n\\t\\t\\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n\\n\\t\\t}\"\n};"},"sourceMaps":null,"error":null,"hash":"0226e2e7e696687ed9c8168c71fa7d30","cacheData":{"env":{}}}